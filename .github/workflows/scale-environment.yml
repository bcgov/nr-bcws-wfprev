on:
  workflow_dispatch:
    inputs:
      DEFAULT_APPLICATION_ENVIRONMENT:
        required: true
        type: choice
        description: Environment to scale
        options:
          - dev
          - test
          - prod
          - wfint
          - wfdlv
          - wftst
          - wfprd
      TYPE_OF_CHANGE:
        required: true
        description: Spin environment up or down
        type: choice
        options:
          - SPIN_UP
          - SPIN_DOWN
      CONFIRM_ENVIRONMENT:
        required: false
        description: Confirm name of environment (only needed if targeting PROD/WFPRD)
        type: string

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  get-image-tag:
    runs-on: ubuntu-22.04
    if: ${{ contains(inputs.TYPE_OF_CHANGE, 'SPIN_UP') }}
    environment: ${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}
    outputs:
      TAG_TO_USE: ${{ steps.mapEnvironments.outputs.TAG_TO_USE }}
      GDB_EXTRACTOR_IMAGE: ${{ steps.getGdbImage.outputs.GDB_EXTRACTOR_IMAGE }}
    steps:
      - id: mapEnvironments
        name: Determine namespaces for deploy
        run: |
          if [ "${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}" == "dev" ] || [ "${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}" == "wfint" ]; then
            TAG_TO_USE="latest"
          elif [ "${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}" == "wfdlv" ]; then
            TAG_TO_SEARCH='[0-9\.]+-beta(?=\")'
            TAG_TO_USE = "$(curl https://api.github.com/repos/${{vars.REPOSITORY_HOST}}/${{ github.repository }}/releases | grep -P $TAG_TO_SEARCH -o | head -n 1)"
          elif [ "${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}" == "test" ] || [ "${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}" == "wftst" ]; then
            TAG_TO_SEARCH='[0-9\.]+-rc(?=\")'
            TAG_TO_USE = "$(curl https://api.github.com/repos/${{vars.REPOSITORY_HOST}}/${{ github.repository }}/releases | grep -P $TAG_TO_SEARCH -o | head -n 1)"
          elif [ "${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}" == "prod" ] || [ "${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}" == "wfprd" ]; then
            TAG_TO_SEARCH='[0-9\.]+(?=\")'
            TAG_TO_USE = "$(curl https://api.github.com/repos/${{vars.REPOSITORY_HOST}}/${{ github.repository }}/releases | grep -P $TAG_TO_SEARCH -o | head -n 1)"
            if [[ "${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}" != "${{ inputs.CONFIRM_ENVIRONMENT }}" ]]; then
              echo "Please confirm environment when scaling prod/wfprd"
              exit 1
            fi
          fi
          echo "TAG_TO_USE=$TAG_TO_USE" >> "$GITHUB_OUTPUT"
          
      - name: Configure AWS credentials for Terraform account (DEV/TEST/PROD)
        uses: aws-actions/configure-aws-credentials@v2
        with:
            role-to-assume:  ${{ secrets.AWS_TERRAFORM_ROLE_TO_ASSUME }}
            role-session-name: wfprev-terraform-s3
            aws-region: ca-central-1    
      

  spin-up:
    needs: [get-image-tag]
    if: ${{ contains(inputs.TYPE_OF_CHANGE, 'SPIN_UP') }}
    uses: ./.github/workflows/terragrunt-deploy.yml
    with:
      DEFAULT_APPLICATION_ENVIRONMENT: ${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}
      IMAGE_TAG: ${{ needs.get-image-tag.outputs.TAG_TO_USE }}
      RUN_LIQUIBASE: true
      COMMAND: apply
      RESTORE_DOWNSCALED_CLUSTER: true
    secrets: inherit
  
  spin-up-ui:
    uses: ./.github/workflows/client-build.yml
    needs: [spin-up]
    with:
      DEFAULT_APPLICATION_ENVIRONMENT: ${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}
    secrets: inherit

  save-vars-on-spin-down:
    runs-on: ubuntu-22.04
    if: ${{ contains(inputs.TYPE_OF_CHANGE, 'SPIN_DOWN') }}
    environment: ${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}

    steps:
      - name: Configure AWS credentials for Terraform account (DEV/TEST/PROD)
        uses: aws-actions/configure-aws-credentials@v2
        with:
            role-to-assume:  ${{ secrets.AWS_TERRAFORM_ROLE_TO_ASSUME }}
            role-session-name: wfprev-terraform-s3
            aws-region: ca-central-1    

      - name: Safety check so we won't overwrite snapshot when DB is already down, then save current GDB image and snapshot
        run: |
          DEFAULT_APPLICATION_ENVIRONMENT=${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}
          TARGET_ENV="${DEFAULT_APPLICATION_ENVIRONMENT#wf}"
          if [[ $(aws rds describe-db-instances --query "DBInstances[?DBInstanceIdentifier== 'wfprev$TARGET_ENV'].DBInstanceIdentifier") != *"\"wfprev$TARGET_ENV\""* ]]; then 
            echo "wfprev$TARGET_ENV DB does not exist! Cannot create snapshot!"
            exit 1
          else
            echo "wfprev$TARGET_ENV DB exists"
          fi
          export GDB_EXTRACTOR_IMAGE="$(aws lambda get-function --function-name wfprev-gdb-$TARGET_ENV --query 'Code.ImageUri' | sed 's/\"//g')"
          aws ssm put-parameter --name 'gdb-extractor-image' --value $GDB_EXTRACTOR_IMAGE --type "String" --data-type "text" --overwrite
          if [[ $(aws rds describe-db-snapshots --snapshot-type=manual) == *"wfprev$TARGET_ENV-scaling-snapshot"* ]]; then 
            aws rds delete-db-snapshot --db-snapshot-identifier wfprev$TARGET_ENV-scaling-snapshot; 
          fi
          aws rds create-db-snapshot --db-snapshot-identifier wfprev$TARGET_ENV-scaling-snapshot --db-instance-identifier wfprev$TARGET_ENV


  spin-down:
    if: ${{ contains(inputs.TYPE_OF_CHANGE, 'SPIN_DOWN') }}
    needs: [save-vars-on-spin-down]
    uses: ./.github/workflows/terragrunt-deploy.yml
    with:
      DEFAULT_APPLICATION_ENVIRONMENT: ${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}
      IMAGE_TAG: latest
      RUN_LIQUIBASE: true
      COMMAND: apply -destroy
    secrets: inherit

