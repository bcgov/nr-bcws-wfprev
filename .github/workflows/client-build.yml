name: Deploy Angular App to S3 and CloudFront

permissions:
  contents: read
  id-token: write

on:
  workflow_call:
    inputs:
      DEFAULT_APPLICATION_ENVIRONMENT:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      DEFAULT_APPLICATION_ENVIRONMENT:
        required: true
        type: string
        default: dev

env:
  APP_CONFIG_FILE: ./client/wfprev-war/src/main/angular/src/assets/data/appConfig.json
  TF_VERSION: 1.8.5
  TG_VERSION: 0.48.4
  TG_SRC_PATH: terraform
  TFC_PROJECT: ${{ secrets.TFC_PROJECT }} 
  TARGET_ENV: ${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}
  NPMRC: ${{ secrets.NPMRC }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:  ${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - id: mapEnvironments
      name: Determine namespaces for deploy
      run: |
        if [ "${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}" == "wfint" ]; then
          echo "NAMESPACE_ENV=dev" >> $GITHUB_OUTPUT
          echo "SHORTENED_ENV=int" >> $GITHUB_OUTPUT
        elif [ "${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}" == "wfdlv" ]; then
          echo "NAMESPACE_ENV=tools" >> $GITHUB_OUTPUT
          echo "SHORTENED_ENV=dlv" >> $GITHUB_OUTPUT
        elif [ "${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}" == "wftst" ]; then
          echo "NAMESPACE_ENV=test" >> $GITHUB_OUTPUT
          echo "SHORTENED_ENV=tst" >> $GITHUB_OUTPUT
        elif [ "${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}" == "wfprd" ]; then
          echo "NAMESPACE_ENV=prod" >> $GITHUB_OUTPUT
          echo "SHORTENED_ENV=prd" >> $GITHUB_OUTPUT
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE_TO_ASSUME }}
        role-session-name: wfprev-terraform-s3
        aws-region: ca-central-1

    - name: Replace tokens
      uses: cschleiden/replace-tokens@v1.3
      with:
          files: ${{ env.APP_CONFIG_FILE }}
      env:
        WFPREV_BASE_URL: ${{ vars.WFPREV_BASE_URL }}
        WFDM_BASE_URL: ${{ vars.WFDM_BASE_URL }}
        OPENMAPS_URL: ${{ vars.OPENMAPS_URL }}
        WEBADE_OAUTH2_CHECK_AUTHORIZE_URL: ${{ vars.WEBADE_OAUTH2_CHECK_AUTHORIZE_URL }}
        WFPREV_CHECK_TOKEN_URL: ${{ vars.WFPREV_CHECK_TOKEN_URL }}
        TARGET_ENV: ${{ env.TARGET_ENV }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Add .npmrc file
      working-directory: ./client/wfprev-war/src/main/angular
      run: echo -e $NPMRC > ~/.npmrc
        
    - name: Debug .npmrc
      run: cat ~/.npmrc

    - name: Clear cache
      working-directory: ./client/wfprev-war/src/main/angular
      run: |
        rm -f package-lock.json
        rm -rf node_modules
        npm cache clean --force

    - name: Install dependencies for Angular project
      run: |
          cd client/wfprev-war/src/main/angular
          npm install

    - name: Build Angular app
      run: |
          cd client/wfprev-war/src/main/angular
          npm run build -- --configuration=production

    # this will require the bucket to exist
    # so terraform step will need to run first
    - name: Sync files to S3
      env:
          TARGET_ENV: ${{ env.TARGET_ENV }}
      run: |
        aws s3 sync client/wfprev-war/src/main/angular/dist/wfprev s3://wfprev-${{ steps.mapEnvironments.outputs.SHORTENED_ENV }}-site \
          --delete \
          --cache-control max-age=31536000,public \
          --exclude index.html
        aws s3 cp client/wfprev-war/src/main/angular/dist/wfprev/index.html s3://wfprev-${{ steps.mapEnvironments.outputs.SHORTENED_ENV }}-site/index.html \
          --cache-control max-age=0,no-cache,no-store,must-revalidate

    - name: Invalidate CloudFront Cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id $(aws cloudfront list-distributions --query 'DistributionList.Items[].Id' | grep -P "[A-Z0-9]+" -o) \
          --paths "/*"
      # There is only one distribution in a given environment - therefore, we can just extract the necessary value from the one available
