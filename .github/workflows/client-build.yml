name: Deploy Angular App to S3 and CloudFront

on:
  push:
    branches:
      - main  # Adjust to your deployment branch
  workflow_call:
    inputs:
      DEFAULT_APPLICATION_ENVIRONMENT:
        required: true
        type: string
      IMAGE_TAG:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      TAG:
        type: string
        description: Additional tag to add to built images

env:
  TF_VERSION: 1.8.5
  TG_SRC_PATH: terraform
  TFC_PROJECT: ${{ secrets.TFC_PROJECT }} 
  TARGET_ENV: ${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE_TO_ASSUME }}
        role-session-name: wfprev-terraform-s3
        aws-region: ca-central-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies for Angular project
      run: |
          cd client/wfprev-war/src/main/angular
          npm install

    - name: Build Angular app
      run: |
          cd client/wfprev-war/src/main/angular
          npm run build -- --configuration=production --base-href=/pub/wfprev/

    - name: Initialize Terraform
      working-directory: ${{ env.TG_SRC_PATH }}
      env:
        TFC_PROJECT:  ${{ env.TFC_PROJECT }}
        TARGET_ENV: ${{ env.TARGET_ENV }}
      run: terraform init
  
    # Fetch CloudFront Distribution ID in order to invalidate cache
    - name: Get Terraform Outputs
      working-directory: ${{ env.TG_SRC_PATH }}
      env:
        TFC_PROJECT:  ${{ env.TFC_PROJECT }}
        TARGET_ENV: ${{ env.TARGET_ENV }}
      run: |
        # Debug current directory and files
        pwd
        ls -la

        # Debug environment variables
        echo "TFC_PROJECT: $TFC_PROJECT"
        echo "TARGET_ENV: $TARGET_ENV"
        echo "Expected bucket: terraform-remote-state-${TFC_PROJECT}-${TARGET_ENV}"
        
        # Show Terraform state
        echo "Terraform State List:"
        terraform state list
        
        # Try to refresh state
        terraform refresh
        
        # Show all outputs again
        echo "Terraform Outputs after refresh:"
        terraform output
        
        # Get CloudFront ID with error checking
        if ! CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id); then
          echo "Error: Failed to get CloudFront Distribution ID"
          exit 1
        fi
        echo "Fetched CloudFront Distribution ID: $CLOUDFRONT_ID"
        echo "CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_S3_PUSH_ROLE }}
        role-session-name: wfprev-push-s3
        aws-region: ca-central-1

    # this will require the bucket to exist
    # so terraform step will need to run first
    - name: Sync files to S3
      run: |
        aws s3 sync ./dist/wfprev s3://wfprev_site_bucket \
          --delete \
          --cache-control max-age=31536000,public \
          --exclude index.html
        aws s3 cp ./dist/wfprev/index.html s3://wfprev_site_bucket/index.html \
          --cache-control max-age=0,no-cache,no-store,must-revalidate

    - name: Invalidate CloudFront Cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
      # see distribution ID section in terraform scripts
      # Like the sync, this means we need to run terraform first, then
      # trigger this action with the returned distribution ID
