
name: Build and Push Lambda Report Generator

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      COMPONENT_NAME:
        type: string
        required: false
        default: report-generator
      TAG:
        required: false
        type: string
        default: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ca-central-1
      IMAGE_NAME: ${{ github.repository_owner }}/report-generator

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=raw,value=${{ github.sha }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./lambda/report-generator
          file: ./lambda/report-generator/src/main/docker/Dockerfile.lambda
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.LZA_ECR_AWS_ACCOUNT_ID }}:role/Terraform-deploy
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-ReportGenerator

      - name: Create ECR Repository for Report Generator (if not exists)
        run: |
          aws ecr describe-repositories --repository-names nr-bcws-wfprev-${{ inputs.COMPONENT_NAME }} --region ca-central-1 || \
          aws ecr create-repository --repository-name nr-bcws-wfprev-${{ inputs.COMPONENT_NAME }} --region ca-central-1

      - name: Get AWS Account ID
        id: getAwsAccount
        run: |
          echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ca-central-1 | docker login --username AWS --password-stdin ${{ secrets.LZA_ECR_AWS_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com
      - name: Pull, Tag, and Push GDB Extractor Docker image to ECR
        id: pushGdbExtractorImage
        run: |
          docker pull ${{vars.REPOSITORY_HOST}}/${{ github.repository_owner }}/nr-bcws-wfprev-${{ inputs.COMPONENT_NAME }}:${{ inputs.TAG }}
          docker tag ${{vars.REPOSITORY_HOST}}/${{ github.repository_owner }}/nr-bcws-wfprev-${{ inputs.COMPONENT_NAME }}:${{ inputs.TAG }} ${{ secrets.LZA_ECR_AWS_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com/nr-bcws-wfprev-${{ inputs.COMPONENT_NAME }}:${{ inputs.TAG }}
          docker push ${{ secrets.LZA_ECR_AWS_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com/nr-bcws-wfprev-${{ inputs.COMPONENT_NAME }}:${{ inputs.TAG }}
